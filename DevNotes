/** users-model.js
    * find
        - You will need to join two tables.
        - Resolves to an ARRAY with all users.
        [
            {
                "user_id": 1,
                "username": "bob",
                "role_name": "admin"
            },
            {
                "user_id": 2,
                "username": "sue",
                "role_name": "instructor"
            }
        ]
    * findBy
        - You will need to join two tables.
        - Resolves to an ARRAY with all users that match the filter condition.
        [
            {
                "user_id": 1,
                "username": "bob",
                "password": "$2a$10$dFwWjD8hi8K2I9/Y65MWi.WU0qn9eAVaiBoRSShTvuJVGw8XpsCiq",
                "role_name": "admin",
            }
        ]
    * findById
        - You will need to join two tables.
        - Resolves to the user with the given user_id.
        {
            "user_id": 2,
            "username": "sue",
            "role_name": "instructor"
        }
*/

/** auth-middlewares
    * restricted
        - If the user does not provide a token in the Authorization header:
        {
            status 401
            "message": "Token required"
        }

        - If the provided token does not verify:
        {
            status 401
            "message": "Token invalid"
        }

        - Put the decoded token in the req object, to make life easier for middlewares downstream!
    
    * only
        - If the user does not provide a token in the Authorization header with a role_name inside its payload matching the role_name passed to this function as its argument:
        { status 403, "message": "This is not for you" }

        - Pull the decoded token from the req object, to avoid verifying it again!
    
    * checkUsernameExists 
        - If the username in req.body does NOT exist in the database
        { status: 401, message: "Invalid credentials" }
    
    * validateRoleName
        - If the role_name in the body is valid, set req.role_name to be the trimmed string and proceed.
        - If role_name is missing from req.body, or if after trimming it is just an empty string,set req.role_name to be 'student' and allow the request to proceed.
        - If role_name is 'admin' after trimming the string:
        { status: 422, message: "Role name can not be admin" }
        - If role_name is over 32 characters after trimming the string:
        { status: 422, message: "Role name can not be longer than 32 chars" }
*/

/** auth-router
    * [POST] /api/auth/register 
        { "username": "anna", "password": "1234", "role_name": "angel" }

    response:
        status 201
        {
            "user"_id: 3,
            "username": "anna",
            "role_name": "angel"
        }
*/